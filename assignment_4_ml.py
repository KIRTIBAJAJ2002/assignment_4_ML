# -*- coding: utf-8 -*-
"""Assignment 4 ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w0UJSOIXXsIWea-ghSA4JJqkBh2bsdR2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd

# URL for the Boston dataset
url = 'https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv'

# Load the dataset into a pandas DataFrame
df = pd.read_csv(url)

# Print the first few rows of the DataFrame
print(df.head())

df.columns

df.info()

df.describe()

sns.pairplot(df)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,accuracy_score




# Split the dataset into features (X) and target variable (y)
X = df.drop('medv', axis=1)
y = df['medv']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest regressor with specified parameters
n_estimators = 100  # Number of decision trees in the forest
max_depth = 5  # Maximum depth of each decision tree
regressor = RandomForestRegressor(n_estimators=n_estimators, max_depth=max_depth)

# Fit the regressor on the training data
regressor.fit(X_train, y_train)

# Make predictions on the test data
y_pred = regressor.predict(X_test)

# Evaluate the performance of the regressor using mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

